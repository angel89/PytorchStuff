# -*- coding: utf-8 -*-
"""Copy of DUDL_FFN_FFNonMNIST.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xBDd3DXKkfcWvbCwLR-tZxx31R3Ol6GP

# COURSE: A deep understanding of deep learning
## SECTION: FFNs
### LECTURE: FFN to classify digits
#### TEACHER: Mike X Cohen, sincxpress.com
##### COURSE URL: udemy.com/course/deeplearning_x/?couponCode=202401
"""

# import libraries
import numpy as np

import torch
import torch.nn as nn
import torch.nn.functional as F
from torch.utils.data import DataLoader,TensorDataset
from sklearn.model_selection import train_test_split

import matplotlib.pyplot as plt
import matplotlib_inline.backend_inline
matplotlib_inline.backend_inline.set_matplotlib_formats('svg')

"""# Import and process the data"""

# import dataset (comes with colab!)
data = np.loadtxt(open('sample_data/mnist_train_small.csv','rb'),delimiter=',')

# extract labels (number IDs) and remove from data
labels = data[:,0]
data   = data[:,1:]

# normalize the data to a range of [0 1]
dataNorm = data / np.max(data)

fig,ax = plt.subplots(1,2,figsize=(10,4))
ax[0].hist(data.flatten(),50)
ax[0].set_xlabel('Pixel intensity values')
ax[0].set_ylabel('Count')
ax[0].set_title('Histogram of original data')

ax[1].hist(dataNorm.flatten(),50)
ax[1].set_xlabel('Pixel intensity values')
ax[1].set_ylabel('Count')
ax[1].set_title('Histogram of normalized data')

plt.show()

"""# Create train/test groups using DataLoader"""

# Step 1: convert to tensor
dataT   = torch.tensor( dataNorm ).float()
labelsT = torch.tensor( labels ).long() # long = int64

# Step 2: use scikitlearn to split the data
train_data,test_data, train_labels,test_labels = train_test_split(dataT, labelsT, test_size=.1)


# Step 3: convert into PyTorch Datasets
train_data = TensorDataset(train_data,train_labels)
test_data  = TensorDataset(test_data,test_labels)

# Step 4: translate into dataloader objects
batchsize    = 32
train_loader = DataLoader(train_data,batch_size=batchsize,shuffle=True,drop_last=True)
test_loader  = DataLoader(test_data,batch_size=test_data.tensors[0].shape[0])

len(dataT[0])

# Commented out IPython magic to ensure Python compatibility.
# check all variables in workspace
# %whos

"""# Create the DL model"""

# create a class for the model
def createTheMNISTNet(nUnits,nLayers):
  class mnistNet(nn.Module):
    def __init__(self,nUnits,nLayers):
      super().__init__()

      # create dictionary to store the layers
      self.layers = nn.ModuleDict()
      self.nLayers = nLayers

      ### input layer
      self.layers['input'] = nn.Linear(784,nUnits)

      ### hidden layers
      for i in range(nLayers):
        self.layers[f'hidden{i}'] = nn.Linear(nUnits,nUnits)

      ### output layer
      self.layers['output'] = nn.Linear(nUnits,10)

  # forward pass
    def forward(self,x):
      # input layer (note: the code in the video omits the relu after this layer)
      x = F.relu( self.layers['input'](x) )

      # hidden layers
      for i in range(self.nLayers):
        x = F.relu( self.layers[f'hidden{i}'](x) )

      # return output layer
      x = self.layers['output'](x)
      return x


  # create the model instance
  net = mnistNet(nUnits,nLayers)

  # loss function
  lossfun = nn.NLLLoss()

  # optimizer
  optimizer = torch.optim.SGD(net.parameters(),lr=.01)

  return net,lossfun,optimizer

nUnitsPerLayer = 12
nLayers = 3
net = createTheMNISTNet(nUnitsPerLayer,nLayers)

X,y = next(iter(train_loader))
yHat = net[0](X)

# values are log-probability of each number (0-9)
# print(torch.exp(yHat))

# now let's compute the loss
loss = net[1](yHat,y)
print(' ')
print('Loss:')
print(loss)

"""# Create a function that trains the model"""

# a function that trains the model

def function2trainTheModel(nUnitsPerLayer,nLayers):

  # number of epochs
  numepochs = 60

  # create a new model
  net,lossfun,optimizer = createTheMNISTNet(nUnitsPerLayer,nLayers)

  # initialize losses
  losses    = torch.zeros(numepochs)
  trainAcc  = []
  testAcc   = []


  # loop over epochs
  for epochi in range(numepochs):

    # loop over training data batches
    batchAcc  = []
    batchLoss = []
    for X,y in train_loader:

      # forward pass and loss
      yHat = net(X)
      loss = lossfun(yHat,y)

      # backprop
      optimizer.zero_grad()
      loss.backward()
      optimizer.step()

      # loss from this batch
      batchLoss.append(loss.item())

      # compute accuracy
      matches = torch.argmax(yHat,axis=1) == y     # booleans (false/true)
      matchesNumeric = matches.float()             # convert to numbers (0/1)
      accuracyPct = 100*torch.mean(matchesNumeric) # average and x100
      batchAcc.append( accuracyPct )               # add to list of accuracies
    # end of batch loop...

    # now that we've trained through the batches, get their average training accuracy
    trainAcc.append( np.mean(batchAcc) )

    # and get average losses across the batches
    losses[epochi] = np.mean(batchLoss)

    # test accuracy
    X,y = next(iter(test_loader)) # extract X,y from test dataloader
    with torch.no_grad():
      yHat = net(X)

    # compare the following really long line of code to the training accuracy lines
    testAcc.append( 100*torch.mean((torch.argmax(yHat,axis=1)==y).float()) )

  # end epochs

  # function output
  return trainAcc,testAcc,losses,net

"""# Run the model and show the results!"""

for i in  range(50, 251, 50):
  print (i)

nLayers = range(1,4)
nUnitsPerLayer = range(50, 251, 50)

accuracies = np.zeros ((2, len(nUnitsPerLayer),len(nLayers)))

for LayerId in  range(len(nLayers)):
  for UnitsPerLayerId in  range(len(nUnitsPerLayer)):

    trainAcc,testAcc,losses,net = function2trainTheModel(nUnitsPerLayer[UnitsPerLayerId],nLayers[LayerId])
    accuracies[0][UnitsPerLayerId][LayerId] = np.mean(trainAcc[-5:])
    accuracies[1][UnitsPerLayerId][LayerId] = np.mean(testAcc[-5:])
    print ("finished for nLayers "+str(nLayers[LayerId])+ " with "+str(nUnitsPerLayer[UnitsPerLayerId])+" units per layer")

fig,ax = plt.subplots(1,2,figsize=(15,6))

ax[0].plot(nUnitsPerLayer,accuracies[0,:,:],'o-',markerfacecolor='w',markersize=9)
ax[1].plot(nUnitsPerLayer,accuracies[1,:,:],'o-',markerfacecolor='w',markersize=9)


for i in range (2)
  ax[i].legend(nLayers)
  ax[i].set_ylabel("Accuracy")
  ax[i].set_xlabel("Number of hiiden layers")
  ax[i].set_title(['Train' if i==0 else 'Test'][0])

plt.show()

"""# Additional explorations"""

# 1) Average together the correct 7's and the error 7's, and make images of them (that is, one image
#    of all correct 7's and one image of all incorrectly labeled 7's). How do they look?
#
# 2) Repeat #1 for all numbers to produce a 2x10 matrix of images with corrects on top
#    and errors on the bottom.
#
# 3) Identify "almost errors," which we can define as correct categorizations that had a probability of
#    e.g., >.1 for any other number. Make images of some of these numbers. Can you understand why the model
#    was confused?
#
# 4) I didn't use .train(), .eval(), or no_grad() here. Is that a problem? Can you add those in without checking
#    other notebooks?
#